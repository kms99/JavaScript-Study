1. DOM (Document Object Model)

자바스크립트가 생긴이유
- 현재는 활용 범위가 높아졌지만 본래는 브라우저에서 사용하기 위한 JS!!
- 웹페이지를 동적으로 만들기 위한 언어
- HTML과 CSS는 구조화를 위한 것으로, 동적인 부분과는 거리가 멀다.

-------------------------------------------------------------------
tip. 클라이언트
사용자 = 브라우저 = 클라이언트 모두 같은 말이다.
-------------------------------------------------------------------

웹페이지가 뜨는 과정
1. 클라이언트가 서버에게 요청 (request)
2. 서버로부터 응답을 받음 (response)
 - 이 응답의 형태는 html 문서 형태
3. 브라우저가 HTML 문서를 해석 (parsing)
 - 브라우저에는 기본적으로 렌더링 엔진이 있다.
 - 랜더링이라는 것은 서버에서 받아온 html 문서를 해석 한다는 것이다.
 - 해석이 필요한 이유는 html 문서를 자바스크립트에서 이해할 수 없기 때문이다.
 - 해석이 완료되면 자바스크립트가 이해할 수 있는 DOM Tree가 구성된다.
 - HTML 문서 뿐만아니라 CSS파일까지 해석하여 최종적으로 RenderTree를 구성한다.
4. RenderTree 기반 레이아웃 계산, 페인팅 과정 시작

결론적으로 DOM은 자바스크립트가 이해할 수 있도록 모델링 한 것을 뜻한다.

DOM은 브라우저에 기본적으로 내장되어있는 API이다.
>>> 어떤의미?
브라우저의 요소들을 컨트롤 할 수 있다.

-------------------------------------------------------------------
tip. API
API는 다른 시스템에서 제공하는 기능을 사용할 수 있도록 도와주는 중간자 역할을 한다. 시스템과 사용자 간의 인터페이스 역할을 한다고 볼 수 있다.
브라우저의 경우에도 기본적으로 DOM과 관련된 API를 제공함으로서 DOM 객체에 접근할 수 있도록 도와준다.
-------------------------------------------------------------------

그렇다면 DOM은 브라우저가 아닌 환경에서도 활용할 수 있을까?
Node 환경 : console.log(document); // document is not defined

안된다.

DOM은 브라우저 환경에서만 사용가능하다. (why? 브라우저에 내장되어있기 때문)
따라서 우리는 다음 두가지를 할 수 있다.

1. DOM 요소에 "접근" 할 수 있다.
2. DOM 요소를 "제어" 할 수 있다.

DOM은 Node를 가진다.
DOM tree 상 발생하는 모든 요소들이 Node이다. (<html> <body> <h1>...)
각각의 Node들은 모두 속성과 메서드를 가지고 있다. 
ex. document.getElementById('demo').innerHTML = "Hello World!";
1. .getElementById() => 메서드
2. .innerHTML => 속성 (프로퍼티)

-----------------------------------------------------------------------
tip. 선택자
HTML 코드 내의 요소에 접근(선택)하기 위해서 지정하는 것을 선택자라고 한다.
ex. id / class
-----------------------------------------------------------------------


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

1. Class 
자바스크립트에서 Class는 ES6에서 처음 도입되었다.
왜이리 늦게 도입이 되었나?
- 다른 언어들은 대부분 클래스 기반의 프로그래밍 개발기법을 사용한다.
- 다른 언어를 개발하던 개발자들이 자바스크립트를 클래스 처럼 개발하려고 노력하다 보니 자바스크립트도 그 필요성을 느끼고 니즈를 반영.


객체지향 언어의 클래스, 인스턴스 개념
1. 클래스는 설계도이다.
설계도가 있어야 규격대로 만들어 낼 수 있다.

2. 클래스를 기반으로 만들어진 사물은 인스턴스이다.
책상 설계도가 클래스라면, 해당 설계도를 기반으로 만들어진 책상은 인스턴스이다.

결론적으로 클래스 역시 객체를 생성하기 위한 방식이다.

**기본 구조**
// 클래스 정의
class (대문자로 시작하는 클래스명) {
    // 기본상태를 나타냄 ()
    constructor(매개변수){

    }
    // 동작을 나타냄
    메서드명 () {

    }
}

// 인스턴스 생성
const classTest1 = new (대문자로 시작하는 클래스명)(매개변수);
// 메서드 실행
classTest1.메서드명();
**

3. extends 로 상속가능

4. static으로 인스턴스 생성없이 메서드 사용가능

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
클로저
1. 렉시컬환경의 outer에서는 함수가 선언된(실행x) 렉시컬 환경 정보가 저장된다.
2. inner함수보다 outer함수가 더 오래 유지되며 inner함수에서는 outer 함수의 요소를 참조할 수 있다.

어디에 사용할까?

상태를 안전하게 변경하고 유지할 때 사용
상태를 안전하게 은닉한다.

**
const increase = (function(){
    let num = 0;
    
    // 클로저
    // return에 선언된 function은 외부함수의 렉시컬환경을 outer에 저장
    // let num 참조가능
    return function (){
        return ++num;
    }
})();

console.log(increase());
num = 100;
console.log(increase());
console.log(increase());
**

의도적이지 않은 값 변경 방지